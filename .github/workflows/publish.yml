name: Package and publish Maverick
on:
  push:
    branches:
      - "main"
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        include:
          # - os: windows-latest
          #   platform: win32
          #   arch: x64
          #   npm_config_arch: x64
          #   pyinstaller_cmd: pyinstaller model_server/app.spec model_server/app.py
          - os: ubuntu-22.04
            platform: linux
            arch: x64
            npm_config_arch: x64
            pyinstaller_cmd: pyinstaller model_server/app.spec model_server/app.py
          # - os: macos-latest
          #   platform: darwin
          #   arch: x64
          #   npm_config_arch: x64
          #   pyinstaller_cmd: pyinstaller model_server/app.spec model_server/app.py
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install
        # - uses: actions/setup-python@v4
        #   with:
        #     python-version: "3.10"
        # - run: pip install -r model_server/requirements.txt pyinstaller
        # - run: ${{ matrix.pyinstaller_cmd }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_config_arch }}
      - shell: pwsh
        run: echo "target=${{ matrix.platform }}-${{ matrix.arch }}" >> $env:GITHUB_ENV
      - run: npx vsce publish --target ${{ env.target }} --allow-star-activation
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
      # - run: npx vsce package --target ${{ env.target }}
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ env.target }}
      #     path: "*.vsix"

  # arm64_build:
  #   runs-on: ubuntu-22.04
  #   name: Build on ubuntu22.04 aarch64

  #   steps:
  #     - uses: actions/checkout@v2.1.0
  #     - uses: uraimo/run-on-arch-action@v2
  #       name: Build artifact
  #       id: build
  #       with:
  #         arch: aarch64
  #         distro: ubuntu22.04

  #         # Not required, but speeds up builds
  #         githubToken: ${{ github.token }}

  #         # # Create an artifacts directory
  #         # setup: |
  #         #   mkdir -p "${PWD}/tmp_model_server" && \
  #         #   cp -r "${PWD}/model_server/" "${PWD}/tmp_model_server/"

  #         # # # Mount the artifacts directory as /artifacts in the container
  #         # dockerRunArgs: |
  #         #   --volume "${PWD}/tmp_model_server:/tmp_model_server"

  #         # The shell to run commands with in the container
  #         shell: /bin/bash

  #         # Install some dependencies in the container. This speeds up builds if
  #         # you are also using githubToken. Any dependencies installed here will
  #         # be part of the container image that gets cached, so subsequent
  #         # builds don't have to re-install them. The image layer is cached
  #         # publicly in your project's package repository, so it is vital that
  #         # no secrets are present in the container state or logs.
  #         install: |
  #           apt-get update -q -y
  #           apt-get install -q -y git
  #           apt-get install -q -y python3.10
  #           apt install -q -y python3-pip
  #           apt install -q -y wget
  #           wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #           [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  #           nvm install 18.12.0
  #           nvm alias default 18.12.0
  #           nvm use default
  #           apt install -q -y npm

  #         run: |
  #           export VSCE_PAT=${{ secrets.VSCE_PAT }}
  #           export NVM_DIR="$HOME/.nvm"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #           [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  #           pip3 install -r model_server/requirements.txt pyinstaller && \
  #           pyinstaller model_server/app_arm64.spec model_server/app.py && \
  #           chown -R root /home/runner/work/maverick/maverick && \
  #           nvm use 18.12.0 && \
  #           npm install && \
  #           npx vsce publish --target linux-arm64 darwin-arm64 --allow-star-activation

  #     # - uses: actions/upload-artifact@v3
  #     #   with:
  #     #     name: linux-arm64
  #     #     path: "*.vsix"

  # publish:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   if: success()
  #   steps:
  #     - uses: actions/download-artifact@v2
  #     - run: npx vsce publish --packagePath $(find . -iname *.vsix)
  #       env:
  #         VSCE_PAT: ${{ secrets.VSCE_PAT }}
